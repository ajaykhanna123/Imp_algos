
import re
import datefinder
from collections import Counter
from datetime import datetime
import math
data="\nP.O 123445,pitrr dd 15222-0330\n done \n 29 june,2022\n"



template_input=""".TTY users should .

Sincerly,

"""

proof_input="""\nP.O 123445,pitrr dd 15222-0330\n done \n 29 june,2022 \n . If you don't contact EDWP by 20 sept,2022 , we will assume the above information
is correct and you will owe a late Enrollment Penalty (LEP).

Sincerly,

"""

WORD = re.compile(r"\w+")


def get_cosine(vec1, vec2):
    intersection = set(vec1.keys()) & set(vec2.keys())
    numerator = sum([vec1[x] * vec2[x] for x in intersection])

    sum1 = sum([vec1[x] ** 2 for x in list(vec1.keys())])
    sum2 = sum([vec2[x] ** 2 for x in list(vec2.keys())])
    denominator = math.sqrt(sum1) * math.sqrt(sum2)

    if not denominator:
        return 0.0
    else:
        return float(numerator) / denominator


def text_to_vector(text):
    words = WORD.findall(text)
    return Counter(words)

def get_green_fields(template_input,proof_input):
    dates_possiblities=re.findall('[\n\t]+\s*[A-Za-z0-9]+.*?\d+\s*[\n\t]+',proof_input)
    date=""
    for date_p in dates_possiblities:
        date_re=re.search('\d{4}-\d{2}-\d{2}|\d{2}/\d{2}/\d{4}|[A-Za-z]{3,12}\s*\d{1,2}\s*[-,]\s*\d{4}|\d{1,2}\s*[A-Za-z]{3,12}\s*[-,]\s*\d{4}',date_p)
        if date_re:
            date=date_re.group()
            break
    current_year=''
    if date!='':
        datetime_date=list(datefinder.find_dates(date))
        current_year=str(datetime_date[0].year)
        date=datetime.strftime(datetime_date[0], '%d %B,%Y')
#         print(date,current_year)
    else:
        print("No date found!!!")
        
    template_input_sub=re.sub('\n',' ',template_input)
    template_input_lines=template_input_sub.split('.')
    proof_input_sub=re.sub('\n',' ',proof_input)
    proof_input_lines=proof_input_sub.split('.')
    return_date_line=""
    for line in template_input_lines:
        if re.search('\[ReturnMailDate\]',line,re.IGNORECASE):

            return_date_line=line

    return_date=''
    if return_date_line!='':
        vector1 = text_to_vector(return_date_line)
        cosine_values_dict={}
        for line in proof_input_lines:
            vector2 = text_to_vector(line)
            cosine_value=get_cosine(vector1, vector2)
            cosine_values_dict[cosine_value]=line
#         print(cosine_values_dict)
        max_cosine_score=max(cosine_values_dict.keys())
        if max_cosine_score>0.80:
            most_similar_return_date_line=cosine_values_dict[max_cosine_score]
            datetime_date=list(datefinder.find_dates(most_similar_return_date_line))
            if len(datetime_date)!=0:
                return_date=datetime.strftime(datetime_date[0], '%d %B,%Y')
        
#         print("return date is ,",date)
    else:
        print("No Return date found!!")
    
    return list([date,current_year,return_date])
        
get_green_fields(template_input,proof_input)
    
