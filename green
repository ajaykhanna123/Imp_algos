
import re
import datefinder
from collections import Counter
from datetime import datetime
import math
data="\nP.O 123445,pitrr dd 15222-0330\n done \n 27 december 2022 \n"



template_input="""\nP.O 123445,pitrr dd 15222-0330\n done \n [date] \n . If you don't contact EDWP by [ReturnMailDate] , we will assume the above information is correct and you will owe a late Enrollment Penalty (LEP)

"""

proof_input="""\nP.O 123445,pitrr dd 15222-0330\n done \n27 december 2022\n . If you don't contact EDWP by 27 de abril de 2022 , we will assume the above information
is correct and you will owe a late Enrollment Penalty (LEP).

Sincerly,

"""




def get_cosine(vec1, vec2):
    intersection = set(vec1.keys()) & set(vec2.keys())
    numerator = sum([vec1[x] * vec2[x] for x in intersection])

    sum1 = sum([vec1[x] ** 2 for x in list(vec1.keys())])
    sum2 = sum([vec2[x] ** 2 for x in list(vec2.keys())])
    denominator = math.sqrt(sum1) * math.sqrt(sum2)

    if not denominator:
        return 0.0
    else:
        return float(numerator) / denominator


def text_to_vector(text):
    WORD = re.compile(r"\w+")
    words = WORD.findall(text)
    return Counter(words)

def get_green_fields(template_input,proof_input):
    
    dates_possiblities=re.findall('[\n\t]+\s*[A-Za-z0-9]+.*?\d+\s*[\n\t]+',proof_input)
#     print(dates_possiblities)
    date=""
    dict_dates_spanish={"enero":"January","febrero":"February","marzo":"March","abril":"April","mayo":"May","junio":"June",
                    "julio":"July","agosto":"augest","septiembre":"September","octubre":"October","noviembre":"November",
                   "diciembre":"December"}
    
    for date_p in dates_possiblities:
        re_spanish_month="|".join(dict_dates_spanish.keys())
#         print(re_spanish_month)
        check_spanish_month=re.search(re_spanish_month,date_p,re.IGNORECASE)
#         print("check spanish month",check_spanish_month)
        if check_spanish_month:
            sub_spanish_month=re.sub(check_spanish_month.group(),dict_dates_spanish[check_spanish_month.group()],date_p,flags=re.IGNORECASE)
            sub_de_spanish=re.sub('de'," ",sub_spanish_month,flags=re.IGNORECASE)
            date=sub_de_spanish
            date_need_to_be_filled=date_p.strip()
            break
        else:
            date_re=re.search('\d{4}-\d{2}-\d{2}|\d{2}/\d{2}/\d{4}|[A-Za-z]{3,12}\s*\d{1,2}\s*[-,]\s*\d{4}|\d{1,2}\s*[A-Za-z]{3,12}\s*[-,]*\s*\d{4}',date_p)
            if date_re:
                date=date_re.group()
                date_need_to_be_filled=date_p.strip()
                break
    current_year=''
    if date!='':
        datetime_date=list(datefinder.find_dates(date))
        if len(datetime_date)!=0:
            current_year=str(datetime_date[0].year)
#             date=datetime.strftime(datetime_date[0], '%d %B,%Y')
            date=date_need_to_be_filled
        else:
            print("datefinder could not convert date format to datetime ->"+str(date_re.group()))
#         print(date,current_year)
    else:
        print("No date found!!!")
        
    template_input_sub=re.sub('\n',' ',template_input)
    template_input_lines=template_input_sub.split('.')
    proof_input_sub=re.sub('\n',' ',proof_input)
    proof_input_lines=proof_input_sub.split('.')
    return_date_line=""
    for line in template_input_lines:
        if re.search('\[ReturnMailDate\]',line,re.IGNORECASE):

            return_date_line=line

    return_date=''
    if return_date_line!='':
        vector1 = text_to_vector(return_date_line)
        cosine_values_dict={}
        for line in proof_input_lines:
            vector2 = text_to_vector(line)
            cosine_value=get_cosine(vector1, vector2)
            cosine_values_dict[cosine_value]=line
            
#         print(cosine_values_dict)
        max_cosine_score=max(cosine_values_dict.keys())
        return_date=''
        if max_cosine_score>0.80:
            most_similar_return_date_line=cosine_values_dict[max_cosine_score]
#             print(most_similar_return_date_line)
            return_string_sim_re_date=re.findall('\d{1,2}.*?\d{4}',most_similar_return_date_line,re.IGNORECASE)
            for i in return_string_sim_re_date:
                re_spanish_month="|".join(dict_dates_spanish.keys())
#         
                check_spanish_month=re.search(re_spanish_month,i,re.IGNORECASE)
                if check_spanish_month:
                    return_date=i.strip()
                    break
                elif re.search('\d{4}-\d{2}-\d{2}|\d{2}/\d{2}/\d{4}|[A-Za-z]{3,12}\s*\d{1,2}\s*[-,]\s*\d{4}|\d{1,2}\s*[A-Za-z]{3,12}\s*[-,]*\s*\d{4}',i):
                    return_date=i.strip()
                    break
                else:
                    return_date=''
                    
            
        else:
            return_date=""
#             datetime_date=list(datefinder.find_dates(most_similar_return_date_line))
#             if len(datetime_date)!=0:
#                 return_date=datetime.strftime(datetime_date[0], '%d %B,%Y')
        
#         print("return date is ,",date)
    else:
        print("No Return date found!!")
    
    return list([date,current_year,return_date])
        
get_green_fields(template_input,proof_input)
    
